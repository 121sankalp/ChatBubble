package com.example.chatauda;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.view.View;
import android.widget.Toast;

import com.example.chatauda.databinding.ActivitySettingactBinding;
import com.example.chatauda.model.user;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;
import com.squareup.picasso.Picasso;

import java.util.HashMap;

public class settingact extends AppCompatActivity {
ActivitySettingactBinding binding ;
    FirebaseStorage storage ;
FirebaseAuth auth ;
FirebaseDatabase database ;
    private  int Storagepermission =1 ;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = ActivitySettingactBinding.inflate(getLayoutInflater());

        setContentView(binding.getRoot());
        storage =FirebaseStorage.getInstance() ;
         auth = FirebaseAuth .getInstance() ;
         database  = FirebaseDatabase.getInstance() ;



        getSupportActionBar().hide() ;
         binding.backarrow.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View view) {
                 Intent intent = new Intent(settingact.this,MainActivity.class) ;
                  startActivity(intent);

             }
         });


         database.getReference().child("user").child(FirebaseAuth.getInstance().getUid())
                         .addListenerForSingleValueEvent(new ValueEventListener() {
                             @Override
                             public void onDataChange(@NonNull DataSnapshot snapshot) {
                                 user u = snapshot.getValue(user.class);

                                 Picasso.get()
                                         .load(u.getProfilepic())
                                         .placeholder(R.drawable.avatar)
                                         .into(binding.profileimage) ;
                                 binding.etuserstatus.setText(u.getStatus());
                                 binding.etusername.setText(u.getUsername());
                             }

                             @Override
                             public void onCancelled(@NonNull DatabaseError error) {

                             }
                         });
   binding.plus.setOnClickListener(new View.OnClickListener() {
       @Override
       public void onClick(View view) {
           if (ContextCompat.checkSelfPermission(settingact.this,
                   Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
               Toast.makeText(settingact.this, "You have already granted this permission!",
                       Toast.LENGTH_SHORT).show();
           } else {
               requestStoragePermission();
           }
           Intent intent = new Intent() ;
           intent.setAction(Intent.ACTION_GET_CONTENT) ;
           intent.setType("image/") ;
            startActivityForResult(intent , 33);
       }
   });

   binding.savebutton.setOnClickListener(new View.OnClickListener() {
       @Override
       public void onClick(View view) {
           String status = binding.etuserstatus.getText().toString() ;
           String username = binding.etusername.getText().toString() ;

           HashMap<String , Object > obj = new HashMap<>() ;
             obj.put("username",username);
             obj.put("status",status);

             database.getReference().child("user").child(FirebaseAuth.getInstance().getUid())
                     .updateChildren(obj) ;
           Toast.makeText(settingact.this, "info is updated", Toast.LENGTH_SHORT).show();

       }

   });
    }
    private void requestStoragePermission  ()
    {

        if(ActivityCompat.shouldShowRequestPermissionRationale(this, Manifest.permission.READ_EXTERNAL_STORAGE)){
            new AlertDialog.Builder(this)
                    .setTitle("Permission needed")
                    .setMessage("This permission is needed because of this and that")
                    .setPositiveButton("ok", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            ActivityCompat.requestPermissions(settingact.this, new String[] {Manifest.permission.READ_EXTERNAL_STORAGE}, Storagepermission);
                        }
                    })
                    .setNegativeButton("cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    })
                    .create().show();

        }
        else {
            ActivityCompat.requestPermissions(this,new String[]{ Manifest.permission.READ_EXTERNAL_STORAGE},Storagepermission);
        }
    }
    @SuppressLint("MissingSuperCall")
    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == Storagepermission) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "Permission GRANTED", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(this, "Permission DENIED", Toast.LENGTH_SHORT).show();
            }
        }
    }


    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if(data.getData()!=null){
            Uri sFile = data.getData() ;
            binding.profileimage.setImageURI(sFile) ;
            final StorageReference reference = storage.getReference().child("profilepicture")
                    .child(FirebaseAuth.getInstance().getUid()) ;
            reference.putFile(sFile) . addOnSuccessListener(new OnSuccessListener<UploadTask.TaskSnapshot>() {
                @Override
                public void onSuccess(UploadTask.TaskSnapshot taskSnapshot) {


                    reference.getDownloadUrl() .addOnSuccessListener(new OnSuccessListener<Uri>() {
                        @Override
                        public void onSuccess(Uri uri) {
                            database.getReference().child("user").child(FirebaseAuth.getInstance().getUid())
                                    .child("profilepic") . setValue(uri .toString()) ;
                            Toast.makeText(settingact.this, "profile picture updated ", Toast.LENGTH_SHORT).show();
                        }
                    });

                }
            }) ;


        }

    }
}

































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































